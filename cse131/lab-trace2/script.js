const code = ["sort_recursive(array, begin, end)",
    "<span></span>IF end — begin < 1",
    "<span></span><span></span>RETURN",
    "<span></span>",
    "<span></span>up <- begin",
    "<span></span>down <- end",
    "<span></span>pivot <- array[(begin + end)/2]",
    "<span></span>",
    "<span></span>WHILE up < down",
    "<span></span><span></span>WHILE up <= end AND pivot > array[up]",
    "<span></span><span></span><span></span>up ++",
    "<span></span><span></span>WHILE down >= 0 AND array[down] > pivot",
    "<span></span><span></span><span></span>down --",
    "<span></span>",
    "<span></span><span></span>IF up <= down",
    "<span></span><span></span><span></span>SWAP array[up], array[down]",
    "<span></span><span></span><span></span>up ++",
    "<span></span><span></span><span></span>down --",
    "<span></span>",
    "<span></span>sort_recursive(array, begin, up — 1)",
    "<span></span>sort_recursive(array, up, end)"
]
const sequence = [
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "0", "9", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "0", "9", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "0", "9", 10],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "1", "9", 11],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "2", "9", 11],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "3", "9", 11],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "9", 11],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "9", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "8", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "7", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "6", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "5", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "4", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "4", "4", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "5", "3", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "5", "3", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "0", "4", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "0", "4", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "0", "4", 10],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "1", "4", 11],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "2", "4", 11],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "2", "4", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "2", "3", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "2", "2", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "2", "2", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "3", "1", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "3", "1", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "0", "2", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "0", "2", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "0", "2", 10],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "1", "2", 11],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "1", "2", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "1", "1", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "1", "1", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "2", "0", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "2", "0", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "1", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "1", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "1", 10],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "1", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "0", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "0", "0", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "1", "-1", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "1", "-1", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "1", "1", "-1", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "2", "2", "0", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "3", "3", "1", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "4", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "4", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "4", 10],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "4", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "3", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "3", "3", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "4", "2", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "4", "2", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "4", "4", "2", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "5", "5", "3", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "5", "9", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "5", "9", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "5", "9", 10],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "6", "9", 11],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "7", "9", 11],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "7", "9", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "7", "8", 13],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "7", "7", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "7", "7", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "8", "6", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "8", "6", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "5", "7", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "5", "7", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "5", "7", 10],
    ["F", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "6", "7", 11],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "6", "7", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "6", "6", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "6", "6", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "7", "5", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "7", "5", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "6", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "6", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "6", 10],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "6", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "5", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "5", "5", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "6", "4", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "6", "4", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "6", "6", "4", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "7", "7", "5", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "8", "8", "6", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["C", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "9", [5,6,7]],
    ["D", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "9", 9],
    ["E", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "9", 10],
    ["G", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "9", 12],
    ["H", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "8", 13],
    ["I", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "8", "8", 15],
    ["J", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "9", "7", [16,17,18]],
    ["K", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "9", "7", 20],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3],
    ["L", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "9", "9", "7", 21],
    ["A", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 2],
    ["B", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "/", "/", "/", 3]
]

code.forEach((lineOfCode,index) => {
    document.querySelector('.code-output').innerHTML +=
        "<div class=\"code-line\"><span class=\"num\">"+(index+1)+"</span><div>"+lineOfCode+"</div></div>"
    document.querySelector('.code-output').style.height = (code.length*21)+"px"
})

function animateTrace(n) {
    if (n <= sequence.length) {
        if (n < sequence.length) {
            seqN = sequence[n]
            if (seqN[seqN.length-1].length > 1) {
                for (let ii = 0; ii<seqN[seqN.length-1].length; ii++) {
                    document.querySelector('.code-line:nth-child('+seqN[seqN.length-1][ii]+')').classList.toggle('active')
                }
            }
            else {
                document.querySelector('.code-line:nth-child('+seqN[seqN.length-1]+')').classList.toggle('active')
            }
            let some_txt = "<th>"+seqN[0]+" ("+seqN[seqN.length-1]+")</th>"
            if (seqN[seqN.length-1].length > 1) {
                some_txt = "<th>"+seqN[0]+" ("+seqN[seqN.length-1][0]+"-"+seqN[seqN.length-1][seqN[seqN.length-1].length-1]+")</th>"
            }
            for (let i = 1; i<seqN.length-1; i++) {
                some_txt += "<td>"+seqN[i]+"</td>"
            }
            document.querySelector('.trace-table tbody').innerHTML += some_txt
        }
        if (n > 0) {
            if (sequence[n-1][sequence[n-1].length-1].length > 1) {
                for (let ii = 0; ii<sequence[n-1][sequence[n-1].length-1].length; ii++) {
                    document.querySelector('.code-line:nth-child('+sequence[n-1][sequence[n-1].length-1][ii]+')').classList.toggle('active')
                }
            }
            else {
                document.querySelector('.code-line:nth-child('+sequence[n-1][sequence[n-1].length-1]+')').classList.toggle('active')
            }
        }
        window.scrollTo(0,document.body.scrollHeight)
        setTimeout(() => {
            animateTrace(n+1)
        }, 250)
    }
}

setTimeout(() => {
    animateTrace(0)
}, 500);
